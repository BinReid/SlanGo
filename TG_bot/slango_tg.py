import asyncio
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
from telegram.ext import CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler, ApplicationBuilder, CallbackQueryHandler
import speech_recognition 
from neuron_model import process_with_gigachat
from voice_to_text import download_file_to_memory, recognize_speech_from_memory

(MAIN_MENU, VOICE, TEXT) = range(3)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üé§ –ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="voice")],
        [InlineKeyboardButton("üìù –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="text")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.message:
        await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    else:
        await update.callback_query.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    
    return MAIN_MENU

async def main_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    if query.data == 'voice':
        await query.edit_message_text("""üé§ –ó–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ä–µ—à–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –≤–∏–¥ –æ–±—Ä–∞—â–µ–Ω–∏—è, –Ω–∞–ø–∏—à–∏—Ç–µ <b>*–Ω–∞–∑–∞–¥*</b>""", parse_mode='HTML')
        return VOICE

    elif query.data == 'text':
        await query.edit_message_text("""üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ä–µ—à–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –≤–∏–¥ –æ–±—Ä–∞—â–µ–Ω–∏—è, –Ω–∞–ø–∏—à–∏—Ç–µ <b>*–Ω–∞–∑–∞–¥*</b>""", parse_mode='HTML')
        return TEXT

async def voice_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # Check if it's a text message with '–Ω–∞–∑–∞–¥' first
        if update.message.text and update.message.text.lower() == '–Ω–∞–∑–∞–¥':
            keyboard = [
                [InlineKeyboardButton("üé§ –ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="voice")],
                [InlineKeyboardButton("üìù –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="text")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
            return MAIN_MENU
        
        # Check if it's actually a voice message
        elif update.message.voice:
            await update.message.reply_text("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
            voice = update.message.voice
            ogg_data = await download_file_to_memory(context.bot, voice.file_id)
            
            text = await asyncio.get_event_loop().run_in_executor(
                None, 
                recognize_speech_from_memory, 
                ogg_data
            )
                    
            await process_with_gigachat(update, text)
            
            # Always show the "Back" button along with other buttons
            return VOICE
        
        else:
            # If it's text but not '–Ω–∞–∑–∞–¥', let unsupported_message_handler handle it
            return await unsupported_message_handler(update, context)
            
    except speech_recognition.UnknownValueError:
        await update.message.reply_text("–ù–µ —Å–º–æ–≥–ª–∏ –≤–∞—Å –ø–æ–Ω—è—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ç—á–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
        return VOICE
    except speech_recognition.RequestError as e:
        await update.message.reply_text("–û–π, –∫–∞–∂–µ—Ç—Å—è —É –Ω–∞—Å –æ—à–∏–±–∫–∞, –Ω–æ –º—ã –µ—ë –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–µ—à–∏–º!)")
        return VOICE
    except Exception as e:
        await update.message.reply_text("–û–π, –∫–∞–∂–µ—Ç—Å—è —É –Ω–∞—Å –æ—à–∏–±–∫–∞, –Ω–æ –º—ã –µ—ë –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–µ—à–∏–º!)")
        print(f"Error: {e}")
        return VOICE

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª "–ù–∞–∑–∞–¥", –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if update.message.text.lower() == '–Ω–∞–∑–∞–¥':
            keyboard = [
            [InlineKeyboardButton("üé§ –ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="voice")],
            [InlineKeyboardButton("üìù –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="text")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
            return MAIN_MENU
        
        else:
            # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            await update.message.reply_text("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ...")
            text = update.message.text
                    
            await process_with_gigachat(update, text)
            
            # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
            return TEXT
            
    except Exception as e:
        await update.message.reply_text("–û–π, –∫–∞–∂–µ—Ç—Å—è —É –Ω–∞—Å –æ—à–∏–±–∫–∞, –Ω–æ –º—ã –µ—ë –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–µ—à–∏–º!)")
        print(f"Error: {e}")
        return TEXT

async def return_to_input_choice(update: Update):
    keyboard = [
        [InlineKeyboardButton("üé§ –ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="voice")],
        [InlineKeyboardButton("üìù –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="text")]     
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞:", reply_markup=reply_markup)
    return MAIN_MENU

async def unsupported_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ —Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ-—Ç–æ –∏–∑ –¥–≤—É—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤—ã—à–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞")
    return await return_to_input_choice(update)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"Exception while handling an update: {context.error}")

def main():
    app = ApplicationBuilder().token("8381057494:AAF7QAAZVgQF31pMMUIY18NfvyTDB0yKAk0").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start_command)],
        states={
            MAIN_MENU: [
                CallbackQueryHandler(main_menu_handler, pattern='^(voice|text)$'),
                MessageHandler(filters.ALL, unsupported_message_handler)
            ],
            VOICE: [
                MessageHandler(filters.VOICE | filters.TEXT, voice_handler),
                MessageHandler(filters.ALL, unsupported_message_handler)
            ],
            TEXT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler),
                MessageHandler(filters.ALL, unsupported_message_handler)
            ]
        },
        fallbacks=[CommandHandler('start', start_command)],
    )

    app.add_handler(conv_handler)
    app.add_error_handler(error_handler)
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == '__main__':
    main()