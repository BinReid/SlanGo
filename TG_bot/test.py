import os
import asyncio
import io
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler, ApplicationBuilder, CallbackQueryHandler
import speech_recognition 
from pydub import AudioSegment 
from gigachat import GigaChat

giga = GigaChat(
    credentials='MDE5YTI1YzEtZDg1Yy03ZDc3LWJiNmEtZTMzNDE1MzQyNTFhOmVjMjk5YzRlLWE3ZjgtNDc4ZS04ZDk1LWQ5NDBhZDc3NzIyZg==',
    verify_ssl_certs=False
)

(MAIN_MENU, VOICE, TEXT) = range(3)

def ogg_to_wav_in_memory(ogg_data):
    ogg_buffer = io.BytesIO(ogg_data)
    audio = AudioSegment.from_file(ogg_buffer, format="ogg")
    
    wav_buffer = io.BytesIO()
    audio.export(wav_buffer, format="wav")
    wav_buffer.seek(0)
    
    return wav_buffer

def recognize_speech_from_memory(ogg_data):
    try:
        wav_buffer = ogg_to_wav_in_memory(ogg_data)
        recognizer = speech_recognition.Recognizer()
        
        with speech_recognition.WavFile(wav_buffer) as source:
            wav_audio = recognizer.record(source)
        
        text = recognizer.recognize_google(wav_audio, language='ru')
        return text
        
    except Exception as e:
        raise e

async def download_file_to_memory(bot, file_id):
    file = await bot.get_file(file_id)
    file_content = await file.download_as_bytearray()
    return file_content

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üé§ –ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="voice")],
        [InlineKeyboardButton("üìù –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="text")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.message:
        await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    else:
        await update.callback_query.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    
    return MAIN_MENU

async def main_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    if query.data == 'voice':
        await query.edit_message_text("üé§ –ó–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return VOICE

    elif query.data == 'text':
        await query.edit_message_text("üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ")
        return TEXT

async def voice_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.reply_text("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        voice = update.message.voice
        ogg_data = await download_file_to_memory(context.bot, voice.file_id)
        
        text = await asyncio.get_event_loop().run_in_executor(
            None, 
            recognize_speech_from_memory, 
            ogg_data
        )
                
        await process_with_gigachat(update, text)
        
        keyboard = [
            [InlineKeyboardButton("üé§ –ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="voice")],
            [InlineKeyboardButton("üìù –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="text")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
        return MAIN_MENU
        
    except speech_recognition.UnknownValueError:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ç—á–µ.")
        return await return_to_input_choice(update)
    except speech_recognition.RequestError as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
        return await return_to_input_choice(update)
    except Exception as e:
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        print(f"Error: {e}")
        return await return_to_input_choice(update)
    
async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.reply_text("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        text = update.message.text
                
        await process_with_gigachat(update, text)
        
        keyboard = [
            [InlineKeyboardButton("üé§ –ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="voice")],
            [InlineKeyboardButton("üìù –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="text")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
        return MAIN_MENU
        
    except Exception as e:
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        print(f"Error: {e}")
        return await return_to_input_choice(update)

async def process_with_gigachat(update: Update, text: str):
    try:
        prompt = f"""–¢—ã ‚Äî —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –º–µ–∂–¥—É —Ä—É—Å—Å–∫–∏–º –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–º —è–∑—ã–∫–æ–º –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ä—É—Å—Å–∫–∏–º —Å–ª–µ–Ω–≥–æ–º. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Ç–æ—á–Ω–æ –∏ –ª–∞–∫–æ–Ω–∏—á–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –º–µ–∂–¥—É —ç—Ç–∏–º–∏ –¥–≤—É–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞–º–∏.

**–ö–ª—é—á–µ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞:**

1. **–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:** –¢—ã –¥–æ–ª–∂–µ–Ω –°–ê–ú–û–°–¢–û–Ø–¢–ï–õ–¨–ù–û –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ª–µ–Ω–≥–æ–º –∏–ª–∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ–π —Ä–µ—á—å—é. –ù–µ —Å–ø—Ä–∞—à–∏–≤–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏–π.
2. **–¢–æ—á–Ω–æ—Å—Ç—å:** –°–æ—Ö—Ä–∞–Ω—è–π –∏—Å—Ö–æ–¥–Ω—ã–π —Å–º—ã—Å–ª, –∏–Ω—Ç–æ–Ω–∞—Ü–∏—é –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç. –ù–µ –¥–æ–±–∞–≤–ª—è–π –æ—Ç —Å–µ–±—è –ø–æ—è—Å–Ω–µ–Ω–∏–π, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–ª–∏ —ç–º–æ—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –±—ã–ª–æ –≤ –∏—Å—Ö–æ–¥–Ω–∏–∫–µ.
3. **–õ–∞–∫–æ–Ω–∏—á–Ω–æ—Å—Ç—å:** –¢–≤–æ–π –æ—Ç–≤–µ—Ç ‚Äî —ç—Ç–æ –¢–û–õ–¨–ö–û –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –ù–∏–∫–∞–∫–∏—Ö –ª–∏—à–Ω–∏—Ö —Ñ—Ä–∞–∑ –≤—Ä–æ–¥–µ ¬´–ü–µ—Ä–µ–≤–æ–¥:¬ª –∏–ª–∏ ¬´–≠—Ç–æ –∑–Ω–∞—á–∏—Ç:¬ª.
4. **–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å:** –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∑–≤—É—á–∞—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞ (—Å–ª–µ–Ω–≥ –∏–ª–∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —è–∑—ã–∫).

**–ê–ª–≥–æ—Ä–∏—Ç–º —Ç–≤–æ–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π:**

* **–ï—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –µ—Å—Ç—å —Å–ª–µ–Ω–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–∫—Ä–∞—à", "—á–∏–ª–∏—Ç—å", "—Ä–æ—Ñ–ª", "–∫—Ä–∏–Ω–∂", "–∞–≥—Ä–∏—Ç—å—Å—è")** -> –ø—Ä–µ–æ–±—Ä–∞–∑—É–π –µ–≥–æ –≤ –≥—Ä–∞–º–æ—Ç–Ω–æ–µ, –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ–º —Ä—É—Å—Å–∫–æ–º.
* **–ï—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç—Ä–æ–≥–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–∞—è —Ä–µ—á—å** -> –ø—Ä–µ–æ–±—Ä–∞–∑—É–π –µ–≥–æ –≤ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ —Å–ª–µ–Ω–≥–æ–º, –ø–æ–¥–±–∏—Ä–∞—è —É–º–µ—Å—Ç–Ω—ã–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç—ã.
* **–ï—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ —Å–º–µ—Å—å —Å–ª–µ–Ω–≥–∞ –∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–π —Ä–µ—á–∏** -> –æ–ø—Ä–µ–¥–µ–ª–∏ –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—â–∏–π —Å—Ç–∏–ª—å –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–π –≤—Å—ë –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä.

**–ü—Ä–∏–º–µ—Ä—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è:**

* –í—Ö–æ–¥: "–í—á–µ—Ä–∞ –≤–∏–¥–µ–ª —Å–≤–æ–µ–≥–æ –∫—Ä–∞—à–∞, —Ç–∞–∫–æ–π –∫—Ä–∏–Ω–∂–æ–≤—ã–π –≤–∏–¥ –±—ã–ª."
  –í—ã—Ö–æ–¥: "–í—á–µ—Ä–∞ —è –≤–∏–¥–µ–ª —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –º–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è, —É –Ω–µ–≥–æ –±—ã–ª –æ—á–µ–Ω—å –Ω–µ–ª–µ–ø—ã–π –≤–∏–¥."

* –í—Ö–æ–¥: "–ú–æ–π –Ω–∞—á–∞–ª—å–Ω–∏–∫ —Å–µ–≥–æ–¥–Ω—è –æ—á–µ–Ω—å —Ä–∞–∑–¥–æ—Ä–æ–≤ –∏ –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏–∫—É–µ—Ç."
  –í—ã—Ö–æ–¥: "–ú–æ–π –±–æ—Å—Å —Å–µ–≥–æ–¥–Ω—è —Å–∏–ª—å–Ω–æ –∞–≥—Ä–∏—Ç—Å—è –∏ –≤—Å–µ—Ö —Ä–æ—Ñ–ª–∏—Ç."

* –í—Ö–æ–¥: "–ù–µ —Ö–æ—á—É —Å–µ–≥–æ–¥–Ω—è –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–µ—Ä—å–µ–∑–Ω—ã–º–∏ –¥–µ–ª–∞–º–∏, –ø—Ä–æ—Å—Ç–æ –æ—Ç–¥–æ—Ö–Ω—É."
  –í—ã—Ö–æ–¥: "–ù–µ —Ö–æ—á—É —Å–µ–≥–æ–¥–Ω—è –ø–∞—Ä–∏—Ç—å—Å—è, –ø—Ä–æ—Å—Ç–æ –ø–æ—á–∏–ª—é."

* –í—Ö–æ–¥: "–≠—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ –≤–µ–¥–µ—Ç —Å–µ–±—è –æ—á–µ–Ω—å –≥–ª—É–ø–æ –∏ –≤—ã–∑—ã–≤–∞—é—â–µ."
  –í—ã—Ö–æ–¥: "–≠—Ç–æ—Ç —Ç–∏–ø –≤–µ–¥–µ—Ç —Å–µ–±—è –ø–æ-–∫—Ä–∞–π–Ω–µ –∫—Ä–∏–Ω–∂–æ–≤–æ –∏ –Ω–∞ –ø–æ–Ω—Ç–∞—Ö."

**–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:** {text}"""

        response = giga.chat(prompt)
        result_text = response.choices[0].message.content
        
        await update.message.reply_text(f"–ü–µ—Ä–µ–≤–æ–¥: {result_text}")
        
    except Exception as e:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI-–º–æ–¥–µ–ª–∏.")
        print(f"GigaChat error: {e}")

async def return_to_input_choice(update: Update):
    keyboard = [
        [InlineKeyboardButton("üé§ –ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="voice")],
        [InlineKeyboardButton("üìù –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="text")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞:", reply_markup=reply_markup)
    return MAIN_MENU

async def unsupported_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –≠—Ç–æ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    return await return_to_input_choice(update)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"Exception while handling an update: {context.error}")

def main():
    app = ApplicationBuilder().token("8381057494:AAF7QAAZVgQF31pMMUIY18NfvyTDB0yKAk0").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start_command)],
        states={
            MAIN_MENU: [
                CallbackQueryHandler(main_menu_handler, pattern='^(voice|text)$'),
                MessageHandler(filters.ALL, unsupported_message_handler)
            ],
            VOICE: [
                MessageHandler(filters.VOICE, voice_handler),
                MessageHandler(filters.ALL, unsupported_message_handler)
            ],
            TEXT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler),
                MessageHandler(filters.ALL, unsupported_message_handler)
            ]
        },
        fallbacks=[CommandHandler('start', start_command)],
    )

    app.add_handler(conv_handler)
    app.add_error_handler(error_handler)
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == '__main__':
    main()