let mediaRecorder;
    let audioChunks = [];
    let isRecording = false;
    let recordingTimer;
    let recordingSeconds = 0;

    // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
    const recordButton = document.getElementById('record-button');
    const recordingStatus = document.getElementById('recording-status');
    const recordingTimerEl = document.getElementById('recording-timer');
    const audioPlayback = document.getElementById('audio-playback');
    const recordedAudio = document.getElementById('recorded-audio');
    const voiceDebug = document.getElementById('voice-debug');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ MediaRecorder
    function checkMediaRecorderSupport() {
        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
            showVoiceDebug('–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É');
            return false;
        }
        
        if (!window.MediaRecorder) {
            showVoiceDebug('–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç MediaRecorder API');
            return false;
        }
        
        showVoiceDebug('–ú–∏–∫—Ä–æ—Ñ–æ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å"');
        return true;
    }

    function showVoiceDebug(message) {
        voiceDebug.innerHTML = `<strong>–û—Ç–ª–∞–¥–∫–∞:</strong> ${message}`;
        console.log('Voice Debug:', message);
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –º–µ—Ç–æ–¥–∞–º–∏ –≤–≤–æ–¥–∞
    document.querySelectorAll('.method-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∏ –æ–±–ª–∞—Å—Ç–∏
            document.querySelectorAll('.method-btn').forEach(b => b.classList.remove('active'));
            document.querySelectorAll('.input-area').forEach(area => area.classList.remove('active'));
            
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é
            this.classList.add('active');
            const method = this.dataset.method;
            document.getElementById(`${method}-input`).classList.add('active');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
            const translateBtn = document.getElementById('translate-button');
            translateBtn.textContent = method === 'text' ? 'üîÑ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏' : 'üé§ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å';

            // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É
            if (method === 'voice') {
                checkMediaRecorderSupport();
            }
        });
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
    document.getElementById('translate-button').addEventListener('click', async function() {
        const activeMethod = document.querySelector('.method-btn.active').dataset.method;
        
        if (activeMethod === 'text') {
            await handleTextTranslation();
        } else {
            await handleVoiceTranslation();
        }
    });

    async function handleTextTranslation() {
        const text = document.getElementById('text-to-translate').value.trim();
        const loading = document.getElementById('loading');
        const resultArea = document.getElementById('result-area');
        const resultContent = document.getElementById('result-content');
        const translateBtn = document.getElementById('translate-button');

        if (!text) {
            showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞');
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        loading.style.display = 'block';
        resultArea.className = 'result-area';
        translateBtn.disabled = true;

        try {
            const response = await fetch('/translate/text', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ text: text })
            });

            const data = await response.json();

            if (data.success) {
                showSuccess(`
                    <div class="original-text">
                        <strong>–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:</strong><br>
                        ${data.original_text}
                    </div>
                    <div class="translated-text">
                        <strong>–ü–µ—Ä–µ–≤–æ–¥:</strong><br>
                        ${data.translated_text}
                    </div>
                `);
            } else {
                showError(data.error || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ');
            }
        } catch (error) {
            showError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: ' + error.message);
        } finally {
            loading.style.display = 'none';
            translateBtn.disabled = false;
        }
    }

    async function handleVoiceTranslation() {
        if (!audioChunks.length) {
            showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
            return;
        }

        const loading = document.getElementById('loading');
        const resultArea = document.getElementById('result-area');
        const resultContent = document.getElementById('result-content');
        const translateBtn = document.getElementById('translate-button');

        loading.style.display = 'block';
        resultArea.className = 'result-area';
        translateBtn.disabled = true;

        try {
            const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
            const formData = new FormData();
            formData.append('audio', audioBlob, 'recording.webm');

            showVoiceDebug('–û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');

            const response = await fetch('/translate/voice', {
                method: 'POST',
                body: formData
            });

            const data = await response.json();

            if (data.success) {
                showSuccess(`
                    <div class="original-text">
                        <strong>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞—è —Ä–µ—á—å:</strong><br>
                        ${data.recognized_text}
                    </div>
                    <div class="translated-text">
                        <strong>–ü–µ—Ä–µ–≤–æ–¥:</strong><br>
                        ${data.translated_text}
                    </div>
                `);
                showVoiceDebug('–ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!');
            } else {
                showError(data.error || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–∞');
                showVoiceDebug('–û—à–∏–±–∫–∞: ' + data.error);
            }
        } catch (error) {
            showError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: ' + error.message);
            showVoiceDebug('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + error.message);
        } finally {
            loading.style.display = 'none';
            translateBtn.disabled = false;
        }
    }

    function showSuccess(content) {
        const resultArea = document.getElementById('result-area');
        const resultContent = document.getElementById('result-content');
        
        resultContent.innerHTML = content;
        resultArea.className = 'result-area success';
    }

    function showError(message) {
        const resultArea = document.getElementById('result-area');
        const resultContent = document.getElementById('result-content');
        
        resultContent.innerHTML = `<p><strong>–û—à–∏–±–∫–∞:</strong> ${message}</p>`;
        resultArea.className = 'result-area error';
    }

    // –¢–∞–π–º–µ—Ä –∑–∞–ø–∏—Å–∏
    function startTimer() {
        recordingSeconds = 0;
        recordingTimer = setInterval(() => {
            recordingSeconds++;
            const minutes = Math.floor(recordingSeconds / 60);
            const seconds = recordingSeconds % 60;
            recordingTimerEl.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        }, 1000);
    }

    function stopTimer() {
        clearInterval(recordingTimer);
        recordingSeconds = 0;
        recordingTimerEl.textContent = '00:00';
    }

    // –ì–æ–ª–æ—Å–æ–≤–∞—è –∑–∞–ø–∏—Å—å
    recordButton.addEventListener('click', async function() {
        if (!isRecording) {
            await startRecording();
        } else {
            stopRecording();
        }
    });

    async function startRecording() {
        try {
            showVoiceDebug('–ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É...');
            
            const stream = await navigator.mediaDevices.getUserMedia({ 
                audio: {
                    echoCancellation: true,
                    noiseSuppression: true,
                    sampleRate: 44100,
                    channelCount: 1
                } 
            });
            
            showVoiceDebug('–ú–∏–∫—Ä–æ—Ñ–æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω. –ù–∞—á–∏–Ω–∞—é –∑–∞–ø–∏—Å—å...');
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
            const options = { 
                audioBitsPerSecond: 128000,
                mimeType: 'audio/webm; codecs=opus'
            };
            
            // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ MIME types
            if (!MediaRecorder.isTypeSupported(options.mimeType)) {
                options.mimeType = 'audio/webm';
                showVoiceDebug('WebM —Å Opus –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –ø—Ä–æ–±—É—é WebM');
            }
            
            if (!MediaRecorder.isTypeSupported(options.mimeType)) {
                options.mimeType = 'audio/mp4';
                showVoiceDebug('WebM –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –ø—Ä–æ–±—É—é MP4');
            }
            
            mediaRecorder = new MediaRecorder(stream, options);
            audioChunks = [];

            mediaRecorder.ondataavailable = event => {
                if (event.data.size > 0) {
                    audioChunks.push(event.data);
                }
            };

            mediaRecorder.onstop = () => {
                showVoiceDebug(`–ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–∞–∑–º–µ—Ä: ${audioChunks.length} —á–∞–Ω–∫–æ–≤`);
                
                if (audioChunks.length > 0) {
                    const audioBlob = new Blob(audioChunks, { type: mediaRecorder.mimeType });
                    recordedAudio.src = URL.createObjectURL(audioBlob);
                    audioPlayback.style.display = 'block';
                    showVoiceDebug('–ó–∞–ø–∏—Å—å –≥–æ—Ç–æ–≤–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ');
                } else {
                    showVoiceDebug('–í–Ω–∏–º–∞–Ω–∏–µ: –∑–∞–ø–∏—Å—å –ø—É—Å—Ç–∞—è');
                }
            };

            mediaRecorder.start(1000); // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
            isRecording = true;
            
            recordButton.classList.add('recording');
            recordButton.textContent = '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å';
            recordingStatus.style.display = 'block';
            audioPlayback.style.display = 'none';
            
            startTimer();
            showVoiceDebug('–ó–∞–ø–∏—Å—å –Ω–∞—á–∞–ª–∞—Å—å...');
            
        } catch (error) {
            console.error('Recording error:', error);
            showVoiceDebug('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É: ' + error.message);
            showError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É: ' + error.message);
        }
    }

    function stopRecording() {
        if (mediaRecorder && isRecording) {
            mediaRecorder.stop();
            mediaRecorder.stream.getTracks().forEach(track => track.stop());
            isRecording = false;
            
            recordButton.classList.remove('recording');
            recordButton.textContent = 'üé§ –ó–∞–ø–∏—Å–∞—Ç—å —Å–Ω–æ–≤–∞';
            recordingStatus.style.display = 'none';
            
            stopTimer();
            showVoiceDebug('–ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
        }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    document.addEventListener('DOMContentLoaded', function() {
        checkMediaRecorderSupport();
        
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑
        document.querySelector('.method-btn[data-method="voice"]').addEventListener('click', checkMediaRecorderSupport);
    });