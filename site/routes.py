from flask import render_template, request, jsonify, Blueprint
import socket
from nnn import process_with_gigachat, recognize_speech_from_memory

main_bp = Blueprint('main', __name__)
    
def get_local_ip():
    """–ü–æ–ª—É—á–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π IP –∞–¥—Ä–µ—Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞"""
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        ip = s.getsockname()[0]
        s.close()
        return ip
    except:
        return "127.0.0.1"


@main_bp.route('/')
def index():
    local_ip = get_local_ip()
    port = 5000
    
    bot_info = {
        'name': 'Slang Translator Bot',
        'description': '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –º–µ–∂–¥—É —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å–ª–µ–Ω–≥–æ–º –∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–º —Ä—É—Å—Å–∫–∏–º —è–∑—ã–∫–æ–º',
        'features': [
            'ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ GigaChat',
            'üé§ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π',
            'üìù –†–∞–±–æ—Ç–∞ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏',
            'üîÑ –î–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –ø–µ—Ä–µ–≤–æ–¥: —Å–ª–µ–Ω–≥ ‚Üî –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —è–∑—ã–∫',
            '‚ö° –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è —Ä–µ—á–∏'
        ],
        'telegram_url': 'https://t.me/Slan_Go_bot',
        'web_version_url': '/webot',
        'slovar': '/slovar',
        'local_ip': local_ip,
        'port': port,
        'local_url': f'http://{local_ip}:{port}'
    }
    return render_template('visit.html', bot_info=bot_info)

@main_bp.route('/webot')
def webot():
    local_ip = get_local_ip()
    port = 5000
    
    bot_info = {
        'name': 'Slang Translator Bot',
        'description': '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –º–µ–∂–¥—É —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å–ª–µ–Ω–≥–æ–º –∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–º —Ä—É—Å—Å–∫–∏–º —è–∑—ã–∫–æ–º',
        'features': [
            'ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ GigaChat',
            'üé§ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π',
            'üìù –†–∞–±–æ—Ç–∞ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏',
            'üîÑ –î–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –ø–µ—Ä–µ–≤–æ–¥: —Å–ª–µ–Ω–≥ ‚Üî –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —è–∑—ã–∫',
            '‚ö° –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è —Ä–µ—á–∏'
        ],
        'telegram_url': 'https://t.me/Slan_Go_bot',
        'web_version_url': '/webot',
        'slovar': '/slovar',
        'local_ip': local_ip,
        'port': port,
        'local_url': f'http://{local_ip}:{port}'
    }
    return render_template('visitka.html', bot_info=bot_info)

@main_bp.route('/slovar')
def slovar():
    local_ip = get_local_ip()
    port = 5000
    
    bot_info = {
        'name': 'Slang Translator Bot',
        'description': '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –º–µ–∂–¥—É —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å–ª–µ–Ω–≥–æ–º –∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–º —Ä—É—Å—Å–∫–∏–º —è–∑—ã–∫–æ–º',
        'features': [
            'ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ GigaChat',
            'üé§ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π',
            'üìù –†–∞–±–æ—Ç–∞ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏',
            'üîÑ –î–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –ø–µ—Ä–µ–≤–æ–¥: —Å–ª–µ–Ω–≥ ‚Üî –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —è–∑—ã–∫',
            '‚ö° –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è —Ä–µ—á–∏'
        ],
        'telegram_url': 'https://t.me/Slan_Go_bot',
        'web_version_url': '/webot',
        'slovar': '/slovar',
        'local_ip': local_ip,
        'port': port,
        'local_url': f'http://{local_ip}:{port}'
    }
    return render_template('slovar.html', bot_info=bot_info)

@main_bp.route('/translate/text', methods=['POST'])
def translate_text():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞"""
    try:
        data = request.get_json()
        text = data.get('text', '').strip()
        
        if not text:
            return jsonify({'success': False, 'error': '–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'})
        
        result = process_with_gigachat(text)
        
        if result:
            return jsonify({
                'success': True,
                'original_text': text,
                'translated_text': result
            })
        else:
            return jsonify({'success': False, 'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞'})
            
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)})

@main_bp.route('/translate/voice', methods=['POST'])
def translate_voice():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞"""
    try:
        if 'audio' not in request.files:
            return jsonify({'success': False, 'error': '–ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'})
        
        audio_file = request.files['audio']
        if audio_file.filename == '':
            return jsonify({'success': False, 'error': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'})
        
        # –ß–∏—Ç–∞–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
        audio_data = audio_file.read()
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
        recognized_text = recognize_speech_from_memory(audio_data)
        if not recognized_text:
            return jsonify({'success': False, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å'})
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —á–µ—Ä–µ–∑ GigaChat
        result = process_with_gigachat(recognized_text)
        
        if result:
            return jsonify({
                'success': True,
                'recognized_text': recognized_text,
                'translated_text': result
            })
        else:
            return jsonify({'success': False, 'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞'})
            
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)})
