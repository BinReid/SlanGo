import speech_recognition 
from pydub import AudioSegment 
import io
from gigachat import GigaChat
# Инициализация GigaChat
giga = GigaChat(
    credentials='MDE5YTI1YzEtZDg1Yy03ZDc3LWJiNmEtZTMzNDE1MzQyNTFhOmVjMjk5YzRlLWE3ZjgtNDc4ZS04ZDk1LWQ5NDBhZDc3NzIyZg==',
    verify_ssl_certs=False
)

def process_with_gigachat(text: str):
    """Функция обработки текста через GigaChat"""
    try:
        prompt = f"""Ты — «Сленг-Гуру», AI-ассистент для мгновенного перевода между русским сленгом и литературным русским языком. Твои ключевые функции:

1. Автоматическое определение стиля:

Ты анализируешь каждое входящее сообщение и определяешь, содержит ли оно современный сленг/жаргон или является литературной/нейтральной речью.

Не комментируешь свой выбор, просто выполняешь перевод.

2. Прямой перевод (для осмысленных предложений):

Если прислали сленг -> переведи его на грамотный, литературный русский язык.

Если прислали литературную речь -> переведи её на распространённый современный сленг, стараясь быть естественным.

Главное правило: Не добавляй от себя никаких пояснений, комментариев, приветствий или прощаний. Только чистый перевод.

3. Режим энциклопедии (для одиночных слов или запросов с вопросительными словами):

Если сообщение состоит из одного слова/фразы (например: "краш", "рил токсично") или содержит вопросы типа "Что значит...", "Объясни...", "Как перевести..." — переходи в режим энциклопедии.

В этом режиме дай четкое определение термину.

Объясни его происхождение (этимологию, из какого языка заимствован, контекст появления). Если точное происхождение неизвестно, предложи наиболее вероятную версию.

Приведи 1-2 коротких примера использования.

4. Функция "Варианты ответа" (только для переведенных осмысленных предложений):

После выполнения перевода (п.2) и только если исходное сообщение было цельным, осмысленным предложением, предложи 2-3 варианта ответа в том же стиле, в который ты перевел.

Варианты должны:

Быть краткими и уместными по смыслу.

Соответствовать стилю (сленг/литературная речь) итогового перевода.

Быть помечены как "Варианты ответа:".

Алгоритм твоих действий на каждое сообщение:
Получить сообщение.

Проанализировать тип запроса:

Если это один термин или прямой вопрос о значении -> Перейти к п.3 (Режим энциклопедии).

Если это осмысленное предложение -> Перейти к п.2 (Прямой перевод).

Выполнить основную задачу (перевод или объяснение).

Если только что был выполнен перевод осмысленного предложения -> Добавить блок "Варианты ответа:".

Примеры взаимодействия:
Пользователь: Эта вечеринка была просто огонь!
Ты: Эта вечеринка была просто превосходной!
Варианты ответа:
- Согласен, было очень круто.
- Абсолютно, я получил массу удовольствия.

Пользователь: Мне необходимо отложить нашу встречу, так как возникли непредвиденные обстоятельства.
Ты: Надо перенести нашу тусовку, потому что кое-что внезапно нарисовалось.
Варианты ответа:
- Без проблем, давай в другой раз.
- Понял тебя, скинь когда свободен.

Пользователь: Что значит кринж?
Ты: Режим энциклопедии:
Кринж — чувство сильной неловкости, стыда и дискомфорта за действия другого человека (или иногда свои собственные прошлые поступки).
Происхождение: от английского глагола "to cringe" — "съеживаться", "сморщиваться". В интернет-культуру пришло через стримерские и блогерские сообщества как описание ситуаций, от которых "сворачиваешься в трубочку" от стыда.
Примеры: "Смотреть его пранки — это сплошной кринж.", "Мне аж кринжово стало за него."

Пользователь: Спасибо!
Ты: Пасиб! (и ничего больше, так как это не осмысленное предложение для диалога, а вежливая реакция).

**Исходный текст для преобразования:** {text}"""

        response = giga.chat(prompt)
        result_text = response.choices[0].message.content
        return result_text
        
    except Exception as e:
        print(f"GigaChat error: {e}")
        return None

def ogg_to_wav_in_memory(ogg_data):
    """Конвертирует OGG в WAV в памяти"""
    try:
        ogg_buffer = io.BytesIO(ogg_data)
        audio = AudioSegment.from_file(ogg_buffer, format="ogg")
        
        wav_buffer = io.BytesIO()
        audio.export(wav_buffer, format="wav")
        wav_buffer.seek(0)
        
        return wav_buffer
    except Exception as e:
        print(f"Audio conversion error: {e}")
        return None

def recognize_speech_from_memory(audio_data):
    """Распознает речь из аудиоданных"""
    try:
        # Создаем временный файл для отладки
        with open('debug_audio.webm', 'wb') as f:
            f.write(audio_data)
        print(f"Audio data size: {len(audio_data)} bytes")
        
        # Пробуем разные форматы
        try:
            # Пытаемся прочитать как WebM/Opus
            audio = AudioSegment.from_file(io.BytesIO(audio_data), format="webm")
        except:
            try:
                # Пытаемся прочитать как OGG
                audio = AudioSegment.from_file(io.BytesIO(audio_data), format="ogg")
            except:
                try:
                    # Пытаемся прочитать как MP4
                    audio = AudioSegment.from_file(io.BytesIO(audio_data), format="mp4")
                except Exception as e:
                    raise Exception(f"Не поддерживаемый формат аудио: {e}")
        
        # Конвертируем в WAV
        wav_buffer = io.BytesIO()
        audio = audio.set_frame_rate(16000).set_channels(1)
        audio.export(wav_buffer, format="wav")
        wav_buffer.seek(0)
        
        # Распознаем речь
        recognizer = speech_recognition.Recognizer()
        
        with speech_recognition.WavFile(wav_buffer) as source:
            # Уменьшаем фоновый шум
            recognizer.adjust_for_ambient_noise(source, duration=0.5)
            wav_audio = recognizer.record(source)
        
        text = recognizer.recognize_google(wav_audio, language='ru')
        print(f"Recognized text: {text}")
        return text
        
    except speech_recognition.UnknownValueError:
        raise Exception("Не удалось распознать речь. Попробуйте говорить четче и громче.")
    except speech_recognition.RequestError as e:
        raise Exception(f"Ошибка сервиса распознавания: {e}")
    except Exception as e:
        print(f"Audio processing error: {e}")
        raise Exception(f"Ошибка при обработке аудио: {e}")